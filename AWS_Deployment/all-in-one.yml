AWSTemplateFormatVersion: '2010-09-09'
Description:              Sentiment-Analysis app ECS

Resources:

  VPC:
    Type:      'AWS::EC2::VPC'
    Properties:
      CidrBlock:            '10.0.0.0/16'  # IP range available within the VPC
      EnableDnsSupport:     true
      EnableDnsHostnames:   true           # the instances launched within the VPC get hosts names
      InstanceTenancy:      default

  Subnet1:
    Type:      AWS::EC2::Subnet
    Properties:
      VpcId:                !Ref VPC                 # the VPC defined above (the VPC the submet belongs to)
      AvailabilityZone:     !Select [0, !GetAZs '']  # 0 - pick the 1st AZ available
      CidrBlock:            !Sub '10.0.0.0/20'       # for the subnet within the VPC
      MapPublicIpOnLaunch:  true

  Subnet2:
    Type:      AWS::EC2::Subnet
    Properties:
      VpcId:                !Ref VPC
      AvailabilityZone:     !Select [1, !GetAZs '']
      CidrBlock:            !Sub '10.0.32.0/20'
      MapPublicIpOnLaunch:  true

  # to allow internet connection to the VPC or resrouces within VPS or subnets
  InternetGateway:
    Type:      'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type:      'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:    !Ref InternetGateway  # Internet Gateway ID
      VpcId:                !Ref VPC              # VPC ID in the same stack

  RouteTable:
    Type:      'AWS::EC2::RouteTable'
    Properties:
      VpcId:                !Ref VPC

  # to associate the route table to both of the subnets
  RouteTableAssociation1:
    Type:      'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:             !Ref Subnet1
      RouteTableId:         !Ref RouteTable

  RouteTableAssociation2:
    Type:      'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:             !Ref Subnet2
      RouteTableId:         !Ref RouteTable

  # to link the internet gateway and route table,
  # and defines destination address to allow the connections 
  InternetRoute:
    Type:      'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      GatewayId:            !Ref InternetGateway
      RouteTableId:         !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'

  # a rold to assign to a container task in ECS
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'Sentiment-Analyser-Cluster'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ecs-services
      Subnets:         # the two created
        #- !ImportValue 'Subnet1'  
        #- !ImportValue 'Subnet2'
        - !Ref 'Subnet1'  
        - !Ref 'Subnet2'
      SecurityGroups:  # create and define
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:  # to allow connections on port (such as 80)
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol:        HTTP
      Port:            99
      DefaultActions:
        - Type:           forward                  # needs a target group
          TargetGroupArn: !Ref DefaultTargetGroup  # create a dummy target group

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      #VpcId:            !ImportValue 'VPC'
      VpcId:            !Ref VPC
      SecurityGroupIngress:
        - CidrIp:     0.0.0.0/0  # allows requests/connections from anywhere
          IpProtocol: -1         # allows all protocols

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:     default
      #VpcId:    !ImportValue 'VPC'
      VpcId:    !Ref VPC
      Protocol: 'HTTP'
      Port:     '99'  

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:    'apis'
      RetentionInDays: 30

  ContainerSecurityGroup:  # create a security group for containers that will allow connections from the load balancer
    Type: AWS::EC2::SecurityGroup      
    Properties:
     #VpcId:            !ImportValue 'VPC'
     VpcId:            !Ref VPC
     GroupDescription: for ecs containers
     SecurityGroupIngress:
       - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
         IpProtocol: -1

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:      apis
      Cpu:         256
      Memory:      512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      #ExecutionRoleArn: !ImportValue ECSTaskExecutionRole
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name:   sentiment-analyser-api-container
          Image:  568495135738.dkr.ecr.ap-southeast-2.amazonaws.com/sentiment-analysis-repository:latest
          Cpu:    256
          Memory: 512
          PortMappings:
            - ContainerPort: 99
              Protocol:      tcp
          # logging
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:         'apis'
              awslogs-region:        !Ref AWS::Region
              awslogs-stream-prefix: 'sentiment-analyser-api'

  # defines how the task or the container will be scheduled and deployed in the cluster
  # also defines how the container instances will be registered with the load balancer listener target
  Service:  
    Type:      AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName:    sentiment-analysis-service
      TaskDefinition: !Ref Task
      #Cluster:        !ImportValue 'ECSCluster'
      Cluster:        !Ref 'ECSCluster'
      LaunchType:     FARGATE
      DesiredCount:   1  # number of instances of the container or task or active deployment
      DeploymentConfiguration:
        MaximumPercent:        200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
            #- !ImportValue Subnet1
            #- !ImportValue Subnet2
          SecurityGroups:
            #- !ImportValue ContainerSecurityGroup
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName:  sentiment-analyser-api-container
          ContainerPort:  99
          TargetGroupArn: !Ref TargetGroup

  # create a new target group for the application container instance (service)
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:     sentiment-analyser-tg
      #VpcId:    !ImportValue VPC
      VpcId:    !Ref VPC
      Port:     99
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 30
      HealthCheckPath:            /healthcheck
      HealthCheckProtocol:        HTTP
      HealthCheckTimeoutSeconds:  5
      HealthyThresholdCount:      10
      TargetType:                 ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      #ListenerArn: !ImportValue Listener
      #ListenerArn: !Ref Listener
      ListenerArn: !Ref LoadBalancerListener
      Priority:    2
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward


Outputs:

  ApiEndpoint:
    Description: Sentiment-Analyser API Endpoint
    Value:       !Join ['', ['http://', !GetAtt LoadBalancer.DNSName, '/']]
    Export:
      Name: 'SentimentAnalyserApiEndpoint'
